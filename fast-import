#!/usr/bin/env bash

# CLI
show_help() {
  echo "Usage $0 -f DUMP_FILE -d STRING [-a ASYNC_TABLE_NAMES] [-r REPLACE_FROM] [-t REPLACE_TO]"
  echo "Example: $0 -f backup.sql.gz -d booking -a \"table_name|table2_name\" -f incorrect -t correct"
  exit 1
}

while :; do
    case $1 in
        -h|--help) show_help
        ;;
        -f) dumpFile="SET"
        ;;
        -d) dbName="SET"
        ;;
        -a) asyncImports="SET"
        ;;
        -r) replaceFrom="SET"
        ;;
        -t) replaceTo="SET"
        ;;
        -n|--none-interactive) echo 'None interactive'
        ;;
        -*) echo "$0: Unrecognized option $1" >&2
            show_help >&2
        ;;
        *) echo "Please run -h or --help to show how to use"
           break
        ;;
    esac
    shift
done

shift $((OPTIND -1))

exec 3<>/dev/tty
read -u 3 -p "Этот скрипт уничтожит данные в базе keitaro, вы уверены что хотите продолжить (yes|no)" yn
case $yn in
    [Yy]*) ;;
    [Nn]*) exit
           ;;
    * )    echo "Please answer yes or no."
           exit
           ;;
esac

mysql_command=$(mysql --execute='SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST WHERE COMMAND = "Query" AND DB = "keitaro"';)

if [[ $mysql_command ]]; then
    echo "База Keitaro уже используется другим процессом"
    exit 1
fi

if [[ -z "${dumpFile}" ]]; then
    echo "-d is required"
    show_help
fi

if test ! -f "$dumpFile"; then
    echo "keitaro dump does not exists"
    exit 1
fi

# prepare directory
rm -rf dump/
mkdir -p dump/

# optimizations
prepend="SET GLOBAL max_connections = 200;"
prepend="$prepend SET UNIQUE_CHECKS = 0; "
prepend="$prepend SET AUTOCOMMIT = 0; "
echo $prepend > dump/prepend.sql

append="SET UNIQUE_CHECKS = 1; "
append="$append SET AUTOCOMMIT = 1; "
append="$append COMMIT ; "
echo $append > dump/append.sql

cd dump/

# unpack
if gzip -dc ../${dumpFile} | csplit -s -ftable - "/-- Table structure for table/" {*}; then
  echo 'Success split dump tables'
else
  echo -e '\e[31mDump tables split failed\e[0m'
  exit 1
fi

replaceInFile() {
  if [[ ! -z "${replaceFrom}" ]] &&  [[ $replaceFrom != $replaceTo ]]; then
    sed -i "s/$replaceFrom/$replaceTo/" $1
  fi
}

# make complite micro dumps
mv table00 head
for file in `ls -1 table*`; do
  tableName=`head -n1 $file | cut -d$'\x60' -f2`
  cat head prepend.sql $file append.sql > "$tableName.sql"
  replaceInFile "$tableName.sql"
done

# cleaning
rm prepend.sql append.sql head table*

# clean db
mysql -e "DROP DATABASE $dbName; CREATE DATABASE $dbName"

# importing
mysql_import(){
  mysql $2 < $1
}

for file in *; do
    mysql_import "$file" "$dbName" &

    tableName=${file%".sql"}
    if [[ -z "$asyncImports" ]]; then
      asyncImports="_clicks|_ref_|visitors"
    fi
    if [[ ! "$tableName" =~ $asyncImports ]]; then
      pids+=($!)
    fi
done

wait "${pids[@]}"

# store end date to a variable
end=`date`

rm -rf ../dump ../${dumpFile}

echo "Some parts of the dump will be imported in background. "
